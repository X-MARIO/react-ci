name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # --- CI ---
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        # Вы можете передать параметры, если они отличаются от стандартных
        # with:
        #   node-version: 20
        #   cache-manager: 'npm'

      - name: Install Dependencies
        uses: ./.github/actions/install-dependencies-npm
        # with:
        #   command: 'npm ci'

      - name: Setup Playwright
        uses: ./.github/actions/setup-playwright

      - name: Run Lint
        uses: ./.github/actions/run-lint
        # with:
        #   command: 'npm run lint' # Пример для не-Nx проекта

      - name: Run Unit Tests
        uses: ./.github/actions/run-tests
        # with:
        #   command: 'npm test'

      - name: Type Check
        uses: ./.github/actions/run-typecheck
        # with:
        #   command: 'tsc --noEmit'

      - name: Security Audit
        uses: ./.github/actions/run-audit

      - name: Build Application
        uses: ./.github/actions/build-app
        # with:
        #   build-command: 'npm run build'
        #   artifact-path: 'dist/my-app'

      - name: Run E2E Tests
        uses: ./.github/actions/run-e2e
        # with:
        #   command: 'npm run e2e'
  security:
    name: Security Scan
    uses: ./.github/workflows/reusable-security-scan.yml
    permissions:
      contents: read
      security-events: write
      actions: read

  # --- CD ---
  deploy:
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy to Production
        uses: ./.github/actions/deploy-app
        # Этот экшен должен будет принимать DOCKERHUB_USERNAME и TOKEN как `inputs`
        # with:
        #   docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
        #   docker-token: ${{ secrets.DOCKERHUB_TOKEN }}
